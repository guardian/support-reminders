// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The SupportReminders stack matches the snapshot 1`] = `
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "IsProd": {
      "Fn::Equals": [
        {
          "Ref": "Stage",
        },
        "PROD",
      ],
    },
  },
  "Description": "The lambdas for supporter reminders",
  "Mappings": {
    "StageMap": {
      "CODE": {
        "CorsOrigin": "'*'",
        "DomainName": "reminders-code.support.guardianapis.com",
      },
      "PROD": {
        "CorsOrigin": "'*'",
        "DomainName": "reminders.support.guardianapis.com",
      },
    },
  },
  "Metadata": {
    "gu:cdk:constructs": [],
    "gu:cdk:version": "TEST",
  },
  "Parameters": {
    "CertificateArn": {
      "Description": "ARN of the certificate",
      "Type": "String",
    },
    "DatalakeBucket": {
      "Description": "Bucket to upload data for ingestion into BigQuery",
      "Type": "String",
    },
    "DeployBucket": {
      "Default": "membership-dist",
      "Description": "Bucket to copy files to",
      "Type": "String",
    },
    "SecurityGroupToAccessPostgres": {
      "Description": "Security group to access the RDS instance",
      "Type": "String",
    },
    "Stack": {
      "Default": "support",
      "Description": "Stack name",
      "Type": "String",
    },
    "Stage": {
      "AllowedValues": [
        "CODE",
        "PROD",
      ],
      "Description": "Set by RiffRaff on each deploy",
      "Type": "String",
    },
    "VpcSubnets": {
      "Description": "Subnets for RDS access",
      "Type": "List<AWS::EC2::Subnet::Id>",
    },
  },
  "Resources": {
    "ApiGateway4XXAlarm": {
      "Condition": "IsProd",
      "Properties": {
        "AlarmActions": [
          {
            "Fn::Sub": "arn:aws:sns:\${AWS::Region}:\${AWS::AccountId}:contributions-dev",
          },
        ],
        "AlarmDescription": "Reminders API received an invalid request",
        "AlarmName": {
          "Fn::Sub": "support-reminders-\${Stage} API gateway 4XX response",
        },
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "ApiName",
            "Value": {
              "Fn::Sub": "support-reminders-\${Stage}",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "4XXError",
        "Namespace": "AWS/ApiGateway",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 8,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ApiGateway5XXAlarm": {
      "Condition": "IsProd",
      "Properties": {
        "AlarmActions": [
          {
            "Fn::Sub": "arn:aws:sns:\${AWS::Region}:\${AWS::AccountId}:contributions-dev",
          },
        ],
        "AlarmDescription": "Reminders API failed to create a signup",
        "AlarmName": {
          "Fn::Sub": "support-reminders-\${Stage} API gateway 5XX response",
        },
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "ApiName",
            "Value": {
              "Fn::Sub": "support-reminders-\${Stage}",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "5XXError",
        "Namespace": "AWS/ApiGateway",
        "Period": 60,
        "Statistic": "Sum",
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "BasePathMapping": {
      "DependsOn": [
        "ServerlessRestApiProdStage",
      ],
      "Properties": {
        "DomainName": {
          "Ref": "DomainName",
        },
        "RestApiId": {
          "Ref": "ServerlessRestApi",
        },
        "Stage": {
          "Fn::Sub": "Prod",
        },
      },
      "Type": "AWS::ApiGateway::BasePathMapping",
    },
    "CancelRemindersLambda": {
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeployBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${Stack}/\${Stage}/support-reminders/support-reminders.zip",
          },
        },
        "Description": "A lambda for cancelling pending support reminders",
        "Environment": {
          "Variables": {
            "Stage": {
              "Ref": "Stage",
            },
          },
        },
        "FunctionName": {
          "Fn::Sub": "support-reminders-cancel-reminders-\${Stage}",
        },
        "Handler": "cancel-reminders/lambda/lambda.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CancelRemindersLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-reminders",
          },
          {
            "Key": "lambda:createdBy",
            "Value": "SAM",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Timeout": 30,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Ref": "SecurityGroupToAccessPostgres",
            },
          ],
          "SubnetIds": {
            "Ref": "VpcSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "CancelRemindersLambdaAlarm": {
      "Condition": "IsProd",
      "Properties": {
        "AlarmActions": [
          {
            "Fn::Sub": "arn:aws:sns:\${AWS::Region}:\${AWS::AccountId}:contributions-dev",
          },
        ],
        "AlarmDescription": "Failed to cancel pending reminders",
        "AlarmName": {
          "Fn::Sub": "support-reminders-cancel-reminders-\${Stage} lambda error",
        },
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "CancelRemindersLambda",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Sum",
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "CancelRemindersLambdaCreateOneOffPermissionProd": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "CancelRemindersLambda",
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:\${AWS::Region}:\${AWS::AccountId}:\${__ApiId__}/\${__Stage__}/POST/cancel",
            {
              "__ApiId__": {
                "Ref": "ServerlessRestApi",
              },
              "__Stage__": "*",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "CancelRemindersLambdaRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": {
                "Action": [
                  "ssm:GetParametersByPath",
                  "ssm:GetParameter",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::Sub": "arn:aws:ssm:\${AWS::Region}:\${AWS::AccountId}:parameter/support-reminders/db-config/\${Stage}",
                  },
                  {
                    "Fn::Sub": "arn:aws:ssm:\${AWS::Region}:\${AWS::AccountId}:parameter/support-reminders/idapi/\${Stage}/*",
                  },
                ],
              },
            },
            "PolicyName": "CancelRemindersLambdaRolePolicy1",
          },
          {
            "PolicyDocument": {
              "Statement": {
                "Action": "s3:GetObject",
                "Effect": "Allow",
                "Resource": [
                  "arn:aws:s3::*:membership-dist/*",
                ],
              },
            },
            "PolicyName": "CancelRemindersLambdaRolePolicy2",
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-reminders",
          },
          {
            "Key": "lambda:createdBy",
            "Value": "SAM",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CreateReminderSignupLambda": {
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeployBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${Stack}/\${Stage}/support-reminders/support-reminders.zip",
          },
        },
        "Description": "A lambda for creating support reminders",
        "Environment": {
          "Variables": {
            "Stage": {
              "Ref": "Stage",
            },
          },
        },
        "FunctionName": {
          "Fn::Sub": "support-reminders-create-reminder-signup-\${Stage}",
        },
        "Handler": "create-reminder-signup/lambda/lambda.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CreateReminderSignupLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-reminders",
          },
          {
            "Key": "lambda:createdBy",
            "Value": "SAM",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Timeout": 30,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Ref": "SecurityGroupToAccessPostgres",
            },
          ],
          "SubnetIds": {
            "Ref": "VpcSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "CreateReminderSignupLambdaAlarm": {
      "Condition": "IsProd",
      "Properties": {
        "AlarmActions": [
          {
            "Fn::Sub": "arn:aws:sns:\${AWS::Region}:\${AWS::AccountId}:contributions-dev",
          },
        ],
        "AlarmDescription": "Failed to create a reminder signup",
        "AlarmName": {
          "Fn::Sub": "support-reminders-create-reminder-signup-\${Stage} lambda error",
        },
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "CreateReminderSignupLambda",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Sum",
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "CreateReminderSignupLambdaCreateOneOffPermissionProd": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "CreateReminderSignupLambda",
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:\${AWS::Region}:\${AWS::AccountId}:\${__ApiId__}/\${__Stage__}/POST/create/one-off",
            {
              "__ApiId__": {
                "Ref": "ServerlessRestApi",
              },
              "__Stage__": "*",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "CreateReminderSignupLambdaCreateRecurringPermissionProd": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "CreateReminderSignupLambda",
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:\${AWS::Region}:\${AWS::AccountId}:\${__ApiId__}/\${__Stage__}/POST/create/recurring",
            {
              "__ApiId__": {
                "Ref": "ServerlessRestApi",
              },
              "__Stage__": "*",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "CreateReminderSignupLambdaRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": {
                "Action": [
                  "ssm:GetParametersByPath",
                  "ssm:GetParameter",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::Sub": "arn:aws:ssm:\${AWS::Region}:\${AWS::AccountId}:parameter/support-reminders/db-config/\${Stage}",
                  },
                  {
                    "Fn::Sub": "arn:aws:ssm:\${AWS::Region}:\${AWS::AccountId}:parameter/support-reminders/idapi/\${Stage}/*",
                  },
                ],
              },
            },
            "PolicyName": "CreateReminderSignupLambdaRolePolicy1",
          },
          {
            "PolicyDocument": {
              "Statement": {
                "Action": "s3:GetObject",
                "Effect": "Allow",
                "Resource": [
                  "arn:aws:s3::*:membership-dist/*",
                ],
              },
            },
            "PolicyName": "CreateReminderSignupLambdaRolePolicy2",
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-reminders",
          },
          {
            "Key": "lambda:createdBy",
            "Value": "SAM",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DNSRecord": {
      "Properties": {
        "Comment": {
          "Fn::Sub": "CNAME for contributions reminders endpoint \${Stage}",
        },
        "HostedZoneName": "support.guardianapis.com.",
        "Name": {
          "Fn::FindInMap": [
            "StageMap",
            {
              "Ref": "Stage",
            },
            "DomainName",
          ],
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "DomainName",
              "RegionalDomainName",
            ],
          },
        ],
        "TTL": "120",
        "Type": "CNAME",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "DomainName": {
      "Properties": {
        "DomainName": {
          "Fn::FindInMap": [
            "StageMap",
            {
              "Ref": "Stage",
            },
            "DomainName",
          ],
        },
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL",
          ],
        },
        "RegionalCertificateArn": {
          "Ref": "CertificateArn",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-reminders",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::ApiGateway::DomainName",
    },
    "NextRemindersLambda": {
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeployBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${Stack}/\${Stage}/support-reminders/support-reminders.zip",
          },
        },
        "Description": "A lambda for getting next reminders data",
        "Environment": {
          "Variables": {
            "Bucket": {
              "Ref": "DatalakeBucket",
            },
            "Stage": {
              "Ref": "Stage",
            },
          },
        },
        "FunctionName": {
          "Fn::Sub": "support-reminders-next-reminders-\${Stage}",
        },
        "Handler": "next-reminders/lambda/lambda.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "NextRemindersLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-reminders",
          },
          {
            "Key": "lambda:createdBy",
            "Value": "SAM",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Timeout": 30,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Ref": "SecurityGroupToAccessPostgres",
            },
          ],
          "SubnetIds": {
            "Ref": "VpcSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "NextRemindersLambdaAlarm": {
      "Condition": "IsProd",
      "Properties": {
        "AlarmActions": [
          {
            "Fn::Sub": "arn:aws:sns:\${AWS::Region}:\${AWS::AccountId}:contributions-dev",
          },
        ],
        "AlarmDescription": "Failed to create next-reminders snapshot",
        "AlarmName": {
          "Fn::Sub": "support-reminders-next-reminders-\${Stage} lambda error",
        },
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "NextRemindersLambda",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Sum",
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "NextRemindersLambdaRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": {
                "Action": [
                  "ssm:GetParametersByPath",
                  "ssm:GetParameter",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::Sub": "arn:aws:ssm:\${AWS::Region}:\${AWS::AccountId}:parameter/support-reminders/db-config/\${Stage}",
                  },
                ],
              },
            },
            "PolicyName": "NextRemindersLambdaRolePolicy1",
          },
          {
            "PolicyDocument": {
              "Statement": {
                "Action": [
                  "s3:PutObject",
                  "s3:PutObjectAcl",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::Sub": "arn:aws:s3:::\${DatalakeBucket}",
                  },
                  {
                    "Fn::Sub": "arn:aws:s3:::\${DatalakeBucket}/*",
                  },
                ],
              },
            },
            "PolicyName": "NextRemindersLambdaRolePolicy2",
          },
          {
            "PolicyDocument": {
              "Statement": {
                "Action": "s3:GetObject",
                "Effect": "Allow",
                "Resource": [
                  "arn:aws:s3::*:membership-dist/*",
                ],
              },
            },
            "PolicyName": "NextRemindersLambdaRolePolicy3",
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-reminders",
          },
          {
            "Key": "lambda:createdBy",
            "Value": "SAM",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "NextRemindersLambdaSchedule": {
      "Properties": {
        "Description": "Run next reminders lambda every day at 00:05",
        "Name": {
          "Fn::Sub": "NextRemindersSchedule-\${Stage}",
        },
        "ScheduleExpression": "cron(05 00 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "NextRemindersLambda",
                "Arn",
              ],
            },
            "Id": "NextRemindersLambdaScheduleLambdaTarget",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "NextRemindersLambdaSchedulePermission": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "NextRemindersLambda",
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "NextRemindersLambdaSchedule",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ReactivateRecurringReminderLambda": {
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeployBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${Stack}/\${Stage}/support-reminders/support-reminders.zip",
          },
        },
        "Description": "A lambda for reactivating cancelled recurring support reminders",
        "Environment": {
          "Variables": {
            "Stage": {
              "Ref": "Stage",
            },
          },
        },
        "FunctionName": {
          "Fn::Sub": "support-reminders-reactivate-recurring-reminder-\${Stage}",
        },
        "Handler": "reactivate-recurring-reminder/lambda/lambda.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "ReactivateRecurringReminderLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-reminders",
          },
          {
            "Key": "lambda:createdBy",
            "Value": "SAM",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Timeout": 30,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Ref": "SecurityGroupToAccessPostgres",
            },
          ],
          "SubnetIds": {
            "Ref": "VpcSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ReactivateRecurringReminderLambdaAlarm": {
      "Condition": "IsProd",
      "Properties": {
        "AlarmActions": [
          {
            "Fn::Sub": "arn:aws:sns:\${AWS::Region}:\${AWS::AccountId}:contributions-dev",
          },
        ],
        "AlarmDescription": "Failed to reactivate cancelled reminders",
        "AlarmName": {
          "Fn::Sub": "support-reminders-reactivate-recurring-reminder-\${Stage} lambda error",
        },
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "ReactivateRecurringReminderLambda",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Sum",
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ReactivateRecurringReminderLambdaReactivatePermissionProd": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "ReactivateRecurringReminderLambda",
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:\${AWS::Region}:\${AWS::AccountId}:\${__ApiId__}/\${__Stage__}/POST/reactivate",
            {
              "__ApiId__": {
                "Ref": "ServerlessRestApi",
              },
              "__Stage__": "*",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ReactivateRecurringReminderLambdaRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": {
                "Action": [
                  "ssm:GetParametersByPath",
                  "ssm:GetParameter",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::Sub": "arn:aws:ssm:\${AWS::Region}:\${AWS::AccountId}:parameter/support-reminders/db-config/\${Stage}",
                  },
                  {
                    "Fn::Sub": "arn:aws:ssm:\${AWS::Region}:\${AWS::AccountId}:parameter/support-reminders/idapi/\${Stage}/*",
                  },
                ],
              },
            },
            "PolicyName": "ReactivateRecurringReminderLambdaRolePolicy1",
          },
          {
            "PolicyDocument": {
              "Statement": {
                "Action": "s3:GetObject",
                "Effect": "Allow",
                "Resource": [
                  "arn:aws:s3::*:membership-dist/*",
                ],
              },
            },
            "PolicyName": "ReactivateRecurringReminderLambdaRolePolicy2",
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-reminders",
          },
          {
            "Key": "lambda:createdBy",
            "Value": "SAM",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SearchRemindersLambda": {
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeployBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${Stack}/\${Stage}/support-reminders/support-reminders.zip",
          },
        },
        "Description": "A lambda for searching for reminders",
        "Environment": {
          "Variables": {
            "Stage": {
              "Ref": "Stage",
            },
          },
        },
        "FunctionName": {
          "Fn::Sub": "support-reminders-search-reminders-\${Stage}",
        },
        "Handler": "search-reminders/lambda/lambda.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "SearchRemindersLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-reminders",
          },
          {
            "Key": "lambda:createdBy",
            "Value": "SAM",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Timeout": 30,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Ref": "SecurityGroupToAccessPostgres",
            },
          ],
          "SubnetIds": {
            "Ref": "VpcSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SearchRemindersLambdaRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": {
                "Action": [
                  "ssm:GetParametersByPath",
                  "ssm:GetParameter",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::Sub": "arn:aws:ssm:\${AWS::Region}:\${AWS::AccountId}:parameter/support-reminders/db-config/\${Stage}",
                  },
                  {
                    "Fn::Sub": "arn:aws:ssm:\${AWS::Region}:\${AWS::AccountId}:parameter/support-reminders/idapi/\${Stage}/*",
                  },
                ],
              },
            },
            "PolicyName": "SearchRemindersLambdaRolePolicy1",
          },
          {
            "PolicyDocument": {
              "Statement": {
                "Action": "s3:GetObject",
                "Effect": "Allow",
                "Resource": [
                  "arn:aws:s3::*:membership-dist/*",
                ],
              },
            },
            "PolicyName": "SearchRemindersLambdaRolePolicy2",
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-reminders",
          },
          {
            "Key": "lambda:createdBy",
            "Value": "SAM",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SearchRemindersLambdaSearchPermissionProd": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "SearchRemindersLambda",
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:\${AWS::Region}:\${AWS::AccountId}:\${__ApiId__}/\${__Stage__}/POST/search",
            {
              "__ApiId__": {
                "Ref": "ServerlessRestApi",
              },
              "__Stage__": "*",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ServerlessRestApi": {
      "Properties": {
        "Body": {
          "info": {
            "title": {
              "Ref": "AWS::StackName",
            },
            "version": "1.0",
          },
          "paths": {
            "/cancel": {
              "options": {
                "consumes": [
                  "application/json",
                ],
                "produces": [
                  "application/json",
                ],
                "responses": {
                  "200": {
                    "description": "Default response for CORS method",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string",
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string",
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string",
                      },
                    },
                  },
                },
                "summary": "CORS support",
                "x-amazon-apigateway-integration": {
                  "requestTemplates": {
                    "application/json": "{
  "statusCode" : 200
}
",
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type'",
                        "method.response.header.Access-Control-Allow-Methods": "'*'",
                        "method.response.header.Access-Control-Allow-Origin": {
                          "Fn::FindInMap": [
                            "StageMap",
                            {
                              "Ref": "Stage",
                            },
                            "CorsOrigin",
                          ],
                        },
                      },
                      "responseTemplates": {
                        "application/json": "{}
",
                      },
                      "statusCode": "200",
                    },
                  },
                  "type": "mock",
                },
              },
              "post": {
                "responses": {},
                "x-amazon-apigateway-integration": {
                  "httpMethod": "POST",
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:\${AWS::Region}:lambda:path/2015-03-31/functions/\${CancelRemindersLambda.Arn}/invocations",
                  },
                },
              },
            },
            "/create/one-off": {
              "options": {
                "consumes": [
                  "application/json",
                ],
                "produces": [
                  "application/json",
                ],
                "responses": {
                  "200": {
                    "description": "Default response for CORS method",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string",
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string",
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string",
                      },
                    },
                  },
                },
                "summary": "CORS support",
                "x-amazon-apigateway-integration": {
                  "requestTemplates": {
                    "application/json": "{
  "statusCode" : 200
}
",
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type'",
                        "method.response.header.Access-Control-Allow-Methods": "'*'",
                        "method.response.header.Access-Control-Allow-Origin": {
                          "Fn::FindInMap": [
                            "StageMap",
                            {
                              "Ref": "Stage",
                            },
                            "CorsOrigin",
                          ],
                        },
                      },
                      "responseTemplates": {
                        "application/json": "{}
",
                      },
                      "statusCode": "200",
                    },
                  },
                  "type": "mock",
                },
              },
              "post": {
                "responses": {},
                "x-amazon-apigateway-integration": {
                  "httpMethod": "POST",
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:\${AWS::Region}:lambda:path/2015-03-31/functions/\${CreateReminderSignupLambda.Arn}/invocations",
                  },
                },
              },
            },
            "/create/recurring": {
              "options": {
                "consumes": [
                  "application/json",
                ],
                "produces": [
                  "application/json",
                ],
                "responses": {
                  "200": {
                    "description": "Default response for CORS method",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string",
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string",
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string",
                      },
                    },
                  },
                },
                "summary": "CORS support",
                "x-amazon-apigateway-integration": {
                  "requestTemplates": {
                    "application/json": "{
  "statusCode" : 200
}
",
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type'",
                        "method.response.header.Access-Control-Allow-Methods": "'*'",
                        "method.response.header.Access-Control-Allow-Origin": {
                          "Fn::FindInMap": [
                            "StageMap",
                            {
                              "Ref": "Stage",
                            },
                            "CorsOrigin",
                          ],
                        },
                      },
                      "responseTemplates": {
                        "application/json": "{}
",
                      },
                      "statusCode": "200",
                    },
                  },
                  "type": "mock",
                },
              },
              "post": {
                "responses": {},
                "x-amazon-apigateway-integration": {
                  "httpMethod": "POST",
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:\${AWS::Region}:lambda:path/2015-03-31/functions/\${CreateReminderSignupLambda.Arn}/invocations",
                  },
                },
              },
            },
            "/reactivate": {
              "options": {
                "consumes": [
                  "application/json",
                ],
                "produces": [
                  "application/json",
                ],
                "responses": {
                  "200": {
                    "description": "Default response for CORS method",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string",
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string",
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string",
                      },
                    },
                  },
                },
                "summary": "CORS support",
                "x-amazon-apigateway-integration": {
                  "requestTemplates": {
                    "application/json": "{
  "statusCode" : 200
}
",
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type'",
                        "method.response.header.Access-Control-Allow-Methods": "'*'",
                        "method.response.header.Access-Control-Allow-Origin": {
                          "Fn::FindInMap": [
                            "StageMap",
                            {
                              "Ref": "Stage",
                            },
                            "CorsOrigin",
                          ],
                        },
                      },
                      "responseTemplates": {
                        "application/json": "{}
",
                      },
                      "statusCode": "200",
                    },
                  },
                  "type": "mock",
                },
              },
              "post": {
                "responses": {},
                "x-amazon-apigateway-integration": {
                  "httpMethod": "POST",
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:\${AWS::Region}:lambda:path/2015-03-31/functions/\${ReactivateRecurringReminderLambda.Arn}/invocations",
                  },
                },
              },
            },
            "/search": {
              "options": {
                "consumes": [
                  "application/json",
                ],
                "produces": [
                  "application/json",
                ],
                "responses": {
                  "200": {
                    "description": "Default response for CORS method",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string",
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string",
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string",
                      },
                    },
                  },
                },
                "summary": "CORS support",
                "x-amazon-apigateway-integration": {
                  "requestTemplates": {
                    "application/json": "{
  "statusCode" : 200
}
",
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type'",
                        "method.response.header.Access-Control-Allow-Methods": "'*'",
                        "method.response.header.Access-Control-Allow-Origin": {
                          "Fn::FindInMap": [
                            "StageMap",
                            {
                              "Ref": "Stage",
                            },
                            "CorsOrigin",
                          ],
                        },
                      },
                      "responseTemplates": {
                        "application/json": "{}
",
                      },
                      "statusCode": "200",
                    },
                  },
                  "type": "mock",
                },
              },
              "post": {
                "responses": {},
                "x-amazon-apigateway-integration": {
                  "httpMethod": "POST",
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:\${AWS::Region}:lambda:path/2015-03-31/functions/\${SearchRemindersLambda.Arn}/invocations",
                  },
                },
              },
            },
          },
          "swagger": "2.0",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-reminders",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ServerlessRestApiDeployment35164ab9c6": {
      "Properties": {
        "Description": "RestApi deployment id: 35164ab9c69e7ad25b481304f695a6fca30e4980",
        "RestApiId": {
          "Ref": "ServerlessRestApi",
        },
        "StageName": "Stage",
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ServerlessRestApiProdStage": {
      "Properties": {
        "DeploymentId": {
          "Ref": "ServerlessRestApiDeployment35164ab9c6",
        },
        "RestApiId": {
          "Ref": "ServerlessRestApi",
        },
        "StageName": "Prod",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-reminders",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "SignupExportsLambda": {
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeployBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${Stack}/\${Stage}/support-reminders/support-reminders.zip",
          },
        },
        "Description": "A lambda for exporting signups data",
        "Environment": {
          "Variables": {
            "Bucket": {
              "Ref": "DatalakeBucket",
            },
            "Stage": {
              "Ref": "Stage",
            },
          },
        },
        "FunctionName": {
          "Fn::Sub": "support-reminders-signup-exports-\${Stage}",
        },
        "Handler": "signup-exports/lambda/lambda.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "SignupExportsLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-reminders",
          },
          {
            "Key": "lambda:createdBy",
            "Value": "SAM",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Timeout": 900,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Ref": "SecurityGroupToAccessPostgres",
            },
          ],
          "SubnetIds": {
            "Ref": "VpcSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SignupExportsLambdaAlarm": {
      "Condition": "IsProd",
      "Properties": {
        "AlarmActions": [
          {
            "Fn::Sub": "arn:aws:sns:\${AWS::Region}:\${AWS::AccountId}:contributions-dev",
          },
        ],
        "AlarmDescription": "Failed to create signups exports",
        "AlarmName": {
          "Fn::Sub": "support-reminders-signup-exports-\${Stage} lambda error",
        },
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "SignupExportsLambda",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 60,
        "Statistic": "Sum",
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "SignupExportsLambdaRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": {
                "Action": [
                  "ssm:GetParametersByPath",
                  "ssm:GetParameter",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::Sub": "arn:aws:ssm:\${AWS::Region}:\${AWS::AccountId}:parameter/support-reminders/db-config/\${Stage}",
                  },
                ],
              },
            },
            "PolicyName": "SignupExportsLambdaRolePolicy1",
          },
          {
            "PolicyDocument": {
              "Statement": {
                "Action": [
                  "s3:PutObject",
                  "s3:PutObjectAcl",
                ],
                "Effect": "Allow",
                "Resource": [
                  {
                    "Fn::Sub": "arn:aws:s3:::\${DatalakeBucket}",
                  },
                  {
                    "Fn::Sub": "arn:aws:s3:::\${DatalakeBucket}/*",
                  },
                ],
              },
            },
            "PolicyName": "SignupExportsLambdaRolePolicy2",
          },
          {
            "PolicyDocument": {
              "Statement": {
                "Action": "s3:GetObject",
                "Effect": "Allow",
                "Resource": [
                  "arn:aws:s3::*:membership-dist/*",
                ],
              },
            },
            "PolicyName": "SignupExportsLambdaRolePolicy3",
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/support-reminders",
          },
          {
            "Key": "lambda:createdBy",
            "Value": "SAM",
          },
          {
            "Key": "Stack",
            "Value": "support",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SignupExportsLambdaSchedule": {
      "Properties": {
        "Description": "Run sigup exports lambda every day at 00:05",
        "Name": {
          "Fn::Sub": "RemindersExportSchedule-\${Stage}",
        },
        "ScheduleExpression": "cron(05 00 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SignupExportsLambda",
                "Arn",
              ],
            },
            "Id": "SignupExportsLambdaScheduleLambdaTarget",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "SignupExportsLambdaSchedulePermission": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "SignupExportsLambda",
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SignupExportsLambdaSchedule",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
  },
}
`;
