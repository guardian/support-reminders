AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: The lambdas for supporter reminders

Parameters:
  Stack:
    Description: Stack name
    Type: String
    Default: support
  Stage:
    Description: Set by RiffRaff on each deploy
    Type: String
    AllowedValues:
      - CODE
      - PROD
  DeployBucket:
    Description: Bucket to copy files to
    Type: String
    Default: membership-dist
  SecurityGroupToAccessPostgres:
    Description: Security group to access the RDS instance
    Type: String
  VpcSubnets:
    Description: Subnets for RDS access
    Type: List<AWS::EC2::Subnet::Id>
  CertificateArn:
    Description: ARN of the certificate
    Type: String
  DatalakeBucket:
    Description: Bucket to upload data for ingestion into BigQuery
    Type: String

Mappings:
  StageMap:
    CODE:
      DomainName: reminders-code.support.guardianapis.com
      CorsOrigin: "'*'"
    PROD:
      DomainName: reminders.support.guardianapis.com
      CorsOrigin: "'*'"

Conditions:
  IsProd: !Equals [ !Ref Stage, "PROD" ]

Globals:
  Api:
    Cors:
      AllowOrigin: !FindInMap [ StageMap, !Ref Stage, CorsOrigin ]
      AllowHeaders: "'Content-Type'"
      AllowMethods: "'*'"

Resources:

  CreateReminderSignupLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub support-reminders-create-reminder-signup-${Stage}
      Description: A lambda for creating support reminders
      Runtime: nodejs12.x
      Handler: create-reminder-signup/lambda/lambda.handler
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          Stage: !Ref Stage
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/support-reminders/support-reminders.zip
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupToAccessPostgres
        SubnetIds: !Ref VpcSubnets
      Policies:
        # there are some extra permissions needed for a lambda to access resources in a VPC
        # https://docs.aws.amazon.com/lambda/latest/dg/vpc.html
        # hence this role rather than BasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParametersByPath
              - ssm:GetParameter
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/support-reminders/db-config/${Stage}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/support-reminders/idapi/${Stage}/*
        - Statement:
            Effect: Allow
            Action: s3:GetObject
            Resource:
              - arn:aws:s3::*:membership-dist/*
      Events:
        CreateOneOff:
            Type: Api
            Properties:
                Path: '/create/one-off'
                Method: post
        CreateRecurring:
            Type: Api
            Properties:
                Path: '/create/recurring'
                Method: post

  CancelRemindersLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub support-reminders-cancel-reminders-${Stage}
      Description: A lambda for cancelling pending support reminders
      Runtime: nodejs12.x
      Handler: cancel-reminders/lambda/lambda.handler
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          Stage: !Ref Stage
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/support-reminders/support-reminders.zip
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupToAccessPostgres
        SubnetIds: !Ref VpcSubnets
      Policies:
        # there are some extra permissions needed for a lambda to access resources in a VPC
        # https://docs.aws.amazon.com/lambda/latest/dg/vpc.html
        # hence this role rather than BasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParametersByPath
              - ssm:GetParameter
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/support-reminders/db-config/${Stage}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/support-reminders/idapi/${Stage}/*
        - Statement:
            Effect: Allow
            Action: s3:GetObject
            Resource:
              - arn:aws:s3::*:membership-dist/*
      Events:
        CreateOneOff:
            Type: Api
            Properties:
                Path: '/cancel'
                Method: post

  ReactivateRecurringReminderLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub support-reminders-reactivate-recurring-reminder-${Stage}
      Description: A lambda for reactivating cancelled recurring support reminders
      Runtime: nodejs12.x
      Handler: reactivate-recurring-reminder/lambda/lambda.handler
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          Stage: !Ref Stage
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/support-reminders/support-reminders.zip
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupToAccessPostgres
        SubnetIds: !Ref VpcSubnets
      Policies:
        # there are some extra permissions needed for a lambda to access resources in a VPC
        # https://docs.aws.amazon.com/lambda/latest/dg/vpc.html
        # hence this role rather than BasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParametersByPath
              - ssm:GetParameter
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/support-reminders/db-config/${Stage}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/support-reminders/idapi/${Stage}/*
        - Statement:
            Effect: Allow
            Action: s3:GetObject
            Resource:
              - arn:aws:s3::*:membership-dist/*
      Events:
        Reactivate:
            Type: Api
            Properties:
                Path: '/reactivate'
                Method: post

  SearchRemindersLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub support-reminders-search-reminders-${Stage}
      Description: A lambda for searching for reminders
      Runtime: nodejs12.x
      Handler: search-reminders/lambda/lambda.handler
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          Stage: !Ref Stage
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/support-reminders/support-reminders.zip
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupToAccessPostgres
        SubnetIds: !Ref VpcSubnets
      Policies:
        # there are some extra permissions needed for a lambda to access resources in a VPC
        # https://docs.aws.amazon.com/lambda/latest/dg/vpc.html
        # hence this role rather than BasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParametersByPath
              - ssm:GetParameter
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/support-reminders/db-config/${Stage}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/support-reminders/idapi/${Stage}/*
        - Statement:
            Effect: Allow
            Action: s3:GetObject
            Resource:
              - arn:aws:s3::*:membership-dist/*
      Events:
        Search:
            Type: Api
            Properties:
                Path: '/search'
                Method: post

  NextRemindersLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub support-reminders-next-reminders-${Stage}
      Description: A lambda for getting next reminders data
      Runtime: nodejs12.x
      Handler: next-reminders/lambda/lambda.handler
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          Stage: !Ref Stage
          Bucket: !Ref DatalakeBucket
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/support-reminders/support-reminders.zip
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupToAccessPostgres
        SubnetIds: !Ref VpcSubnets
      Policies:
        # there are some extra permissions needed for a lambda to access resources in a VPC
        # https://docs.aws.amazon.com/lambda/latest/dg/vpc.html
        # hence this role rather than BasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParametersByPath
              - ssm:GetParameter
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/support-reminders/db-config/${Stage}
        - Statement:
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
            Resource:
              - !Sub arn:aws:s3:::${DatalakeBucket}
              - !Sub arn:aws:s3:::${DatalakeBucket}/*
        - Statement:
            Effect: Allow
            Action: s3:GetObject
            Resource:
              - arn:aws:s3::*:membership-dist/*
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: 'cron(05 00 * * ? *)'
            Name: !Sub NextRemindersSchedule-${Stage}
            Description: Run next reminders lambda every day at 00:05
            Enabled: True

  SignupExportsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub support-reminders-signup-exports-${Stage}
      Description: A lambda for exporting signups data
      Runtime: nodejs12.x
      Handler: signup-exports/lambda/lambda.handler
      MemorySize: 512
      Timeout: 900
      Environment:
        Variables:
          Stage: !Ref Stage
          Bucket: !Ref DatalakeBucket
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/support-reminders/support-reminders.zip
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupToAccessPostgres
        SubnetIds: !Ref VpcSubnets
      Policies:
        # there are some extra permissions needed for a lambda to access resources in a VPC
        # https://docs.aws.amazon.com/lambda/latest/dg/vpc.html
        # hence this role rather than BasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParametersByPath
              - ssm:GetParameter
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/support-reminders/db-config/${Stage}
        - Statement:
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
            Resource:
              - !Sub arn:aws:s3:::${DatalakeBucket}
              - !Sub arn:aws:s3:::${DatalakeBucket}/*
        - Statement:
            Effect: Allow
            Action: s3:GetObject
            Resource:
              - arn:aws:s3::*:membership-dist/*
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: 'cron(05 00 * * ? *)'
            Name: !Sub RemindersExportSchedule-${Stage}
            Description: Run sigup exports lambda every day at 00:05
            Enabled: True

  DomainName:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      RegionalCertificateArn: # only for *.support.guardianapis.com
        !Ref CertificateArn
      DomainName: !FindInMap [ StageMap, !Ref Stage, DomainName ]
      EndpointConfiguration:
        Types:
          - REGIONAL

  BasePathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Properties:
      RestApiId: !Ref ServerlessRestApi # auto generated by the Transform
      DomainName: !Ref DomainName
      Stage: !Sub Prod
    DependsOn: ServerlessRestApiProdStage # auto generated by the Transform

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: support.guardianapis.com.
      Name: !FindInMap [ StageMap, !Ref Stage, DomainName ]
      Comment: !Sub CNAME for contributions reminders endpoint ${Stage}
      Type: CNAME
      TTL: '120'
      ResourceRecords:
        - !GetAtt [ DomainName, RegionalDomainName ]

  CreateReminderSignupLambdaAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:contributions-dev
      AlarmName: !Sub support-reminders-create-reminder-signup-${Stage} lambda error
      AlarmDescription: Failed to create a reminder signup
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref CreateReminderSignupLambda
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Period: 60
      EvaluationPeriods: 1
      Statistic: Sum

  CancelRemindersLambdaAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:contributions-dev
      AlarmName: !Sub support-reminders-cancel-reminders-${Stage} lambda error
      AlarmDescription: Failed to cancel pending reminders
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref CancelRemindersLambda
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Period: 60
      EvaluationPeriods: 1
      Statistic: Sum

  ReactivateRecurringReminderLambdaAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:contributions-dev
      AlarmName: !Sub support-reminders-reactivate-recurring-reminder-${Stage} lambda error
      AlarmDescription: Failed to reactivate cancelled reminders
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref ReactivateRecurringReminderLambda
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Period: 60
      EvaluationPeriods: 1
      Statistic: Sum

  NextRemindersLambdaAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:contributions-dev
      AlarmName: !Sub support-reminders-next-reminders-${Stage} lambda error
      AlarmDescription: Failed to create next-reminders snapshot
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref NextRemindersLambda
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Period: 60
      EvaluationPeriods: 1
      Statistic: Sum

  SignupExportsLambdaAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:contributions-dev
      AlarmName: !Sub support-reminders-signup-exports-${Stage} lambda error
      AlarmDescription: Failed to create signups exports
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref SignupExportsLambda
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Period: 60
      EvaluationPeriods: 1
      Statistic: Sum

  ApiGateway4XXAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:contributions-dev
      AlarmName: !Sub support-reminders-${Stage} API gateway 4XX response
      AlarmDescription: Reminders API received an invalid request
      MetricName: 4XXError
      Namespace: AWS/ApiGateway
      Dimensions:
        - Name: ApiName
          Value: !Sub support-reminders-${Stage}
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 8
      Period: 300
      EvaluationPeriods: 1
      Statistic: Sum

  ApiGateway5XXAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:contributions-dev
      AlarmName: !Sub support-reminders-${Stage} API gateway 5XX response
      AlarmDescription: Reminders API failed to create a signup
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Dimensions:
        - Name: ApiName
          Value: !Sub support-reminders-${Stage}
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Period: 60
      EvaluationPeriods: 1
      Statistic: Sum
